# -*- coding: utf-8 -*-
"""Campo_Direccional_EDO1erOrden_ExtraMCA4_25-1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1peAZXjiDU0JMAg56ANyAWkDSC69ojgyA

# <h1 align="center"> Campo Direccional 2D Normalizado </h1>


# EDO de 1er orden
\begin{align*}
y' &= f(t, y) \\
\end{align*}
$y(t): D \subseteq \mathbb{R} ⟶ \mathbb{R}$ <br>



<br>Referencias:

  * Odubanjo, Oluwatosin (27 Dic 2021). How to Plot a Direction Field with Python, Seción 6. <br> web: https://pubhtml5.com/enyy/ikvo/basic/
  * Matplotlib, Api Reference Matplotlib.pyplot.quiver
  <br> web https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.quiver.html

---
Material: Extraordinario de MCA4 25-1

Profesores: Juan Carlos Balleza <br />
&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;Roberto Méndez Méndez

Editado: 6 Oct 24  v3

### Ejemplo 1) Campo Direccional de la EDO

\begin{equation}
\frac{dy}{dt} = -x^2 - y(x - 1)
\end{equation}
<pre>
 f(x,y) = -x**2 - y*(x-1) en nomenclatura de python
</pre>
"""

import numpy as np
import matplotlib.pyplot as plt

# Definición de la función f(x,y) [Derivada]
def f(x,y):
    return -x**2 - y*(x - 1)

nx, ny = .2, .2
x = np.arange(-3, 3, nx)
y = np.arange(-2, 2, ny)

# MESHGRID
X, Y = np.meshgrid(x, y)

# Derivative
dy = f(X,Y)
dx =np.ones(X.shape)

# Normalizar
dyu = dy/np.sqrt(dx**2 + dy**2)
dxu = dx/np.sqrt(dx**2 + dy**2)

# Gráficas
plt.quiver(X,Y,dxu,dyu, color = "orange",  headwidth = 2)
plt.xticks(x, rotation = 60)
plt.yticks(y)
plt.title("Directional Field y' = -x**2 -(x -1)*y", color='blue',
              fontsize ='x-large')
plt.show()

"""### Ejemplo 2) Campo Direccional de la EDO

\begin{equation}
\frac{dy}{dt} = -\frac{y}{x} - \frac{1}{x^2}
\end{equation}
### siendo $f(x,y)= -\frac{y}{x} - \frac{1}{x^2}$ y en Python f(x,y) = -y/x - 1/x**2
"""

import numpy as np
import matplotlib.pyplot as plt

# Definición de la función f(x,y) [Derivada]
def f(x,y):
    return -y/x - 1/x**2

#nx, ny = .3, .3
nx, ny = .2, .2
x = np.arange(-3, 3, nx)
y = np.arange(-2, 2, ny)

# MESHGRID
X, Y = np.meshgrid(x, y)

# Derivative
dy = f(X,Y)
dx =np.ones(X.shape)

# Normalizar
dyu = dy/np.sqrt(dx**2 + dy**2)
dxu = dx/np.sqrt(dx**2 + dy**2)

# Gráficas
plt.quiver(X,Y,dxu,dyu, color = "orange",  headwidth = 2)
plt.xticks(x, rotation = 60)
plt.yticks(y)
plt.title("Directional Field y' = -y/x - 1/x**2", color='blue', fontsize ='x-large')
plt.show()